package Demo is
    type Token is enum record
        Line : Natural
    with No_Value of
        End_Of_File,
        Error,
        Left_Parenthesis,
        Right_Parenthesis,
        Minus,
        Plus,
        Slash,
        Star =>
            null;
    with String_Value of
        Number,
        Symbol,
        Comment =>
            Text : String;
    with Stop_State of
        Error,
        End_Of_File;
    with Operator of
        Minus,
        Plus,
        Slash,
        Star;
    end record;

    procedure Put (Token : Token);
end;

use type Optional[T] is enum record
    with Some => Value : T;
    with None;
    where T : not void;
end record;

function Get_User(ID : String) returns Optional[User];

let User := Get_User(ID);
case User is
    when Some(Value => (Name => let Name)) => Name;
    when Some(Value => let User) => User.Name; --  duplicate case
    when others => "";
end case;
